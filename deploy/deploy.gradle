apply plugin: "signing"
apply plugin: "maven-publish"

//nexusStaging {
//    packageGroup = GROUP
//    numberOfRetries = 40
//    delayBetweenRetriesInMillis = 4000
//}

if (project.hasProperty('android')) {
    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }
}

afterEvaluate { project ->
    // See https://developer.android.com/studio/build/maven-publish-plugin
    // and https://docs.gradle.org/current/userguide/publishing_maven.html
    // and https://proandroiddev.com/android-maven-publish-for-your-libraries-b76ad47677df
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Adds Javadocs and Sources as separate jars.
                if (project.hasProperty('android')) {
                    artifact androidSourcesJar
                    artifact bundleReleaseAar
                } else if (project.hasProperty('artifactPath')) {
                    artifact project.artifactPath
                }

                groupId = project.groupId
                artifactId = project.artifactId
                version = project.publishVersion

                pom {
                    name = project.artifactName
                    packaging = "aar"
                    description = project.artifactDescrption
                    url = "https://github.com/dock2dock/dock2dock-android"

                    scm {
                        connection = 'scm:git:github.com/dock2dock/dock2dock-android.git'
                        developerConnection = 'scm:git:ssh://github.com/dock2dock/dock2dock-android.git'
                        url = 'https://github.com/dock2dock/dock2dock-android'
                    }

                    licenses {
                        license {
                            name = "The Apache Software License, Version 2.0"
                            url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }

                    developers {
                        developer {
                            id = "dock2dock"
                            name = "dock2dock"
                        }
                    }
                }

                pom.withXml {
                    final dependenciesNode = asNode().appendNode("dependencies")
                    ext.addDependency = { dep, scope ->
                        logger.lifecycle("updating dep $dep")
                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") {
                            return // invalid dependencies should be ignored
                        }

                        final depGroup = dep.group
                        // If it's a project dependency, use the artifactId, otherwise use its name.
                        final depName = dep.hasProperty("dependencyProject") && dep.dependencyProject.hasProperty("artifactId") ?
                                dep.dependencyProject.artifactId : dep.name

                        final depVersion = dep.version != 'unspecified' ? dep.version : project.publishVersion

                        final dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", depGroup)
                        dependencyNode.appendNode("artifactId", depName)
                        dependencyNode.appendNode("version", depVersion)
                        dependencyNode.appendNode("scope", scope)

                    }

                    if (configurations.hasProperty("api")) {
                        configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                    }
                    if (configurations.hasProperty("implementation")) {
                        configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
                    }
                }

            }
        }
    }

    artifacts {
        if (project.hasProperty('android')) {
            archives androidSourcesJar
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}